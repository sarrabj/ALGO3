//SOLUTION WITH PROCEDURE//

PROCEDURE dot_product(VAR v1,v2: ARRAY_OF INTEGER[10], VAR ps:INTEGER )
VAR
    v1,v2: ARRAY_OF INTEGER[10];
    i,ps: INTEGER
BEGIN
    ps:= 0
    i:= 0
    
    IF (V1.length <> v2.length) THEN
        write("v1 and v2 are not equal! ")
        ps := NAN
    END_IF

    WHILE (i<v1.length) DO
        ps := ps + (v1[i]*v2[i])
        i++
    END_WHILE
END

ALGORITHM orthogo_vect
VAR
    v1,v2 : ARRAY_OF INTEGER[10];
    ps: INTEGER
BEGIN
    write("enter v1 ")
    n1 := read size_v1("v1,n2")
    write("enter v2 ")
    n2 := read size_v1("v2,n2")

    dot_product (v1,v2,ps)
    IF (ps = 0) THEN
        write ("v1 and v2 are two orthogonal vectors")
    ELSE
        write("v1 and v2 are not orthogonal vectors")
    END_IF 
        
    
END

// SOLUTION WITH FUNCTION// 

FUNCTION dot_product(VAR v1,v2: ARRAY_OF INTEGER[10] ): return_INTEGER
VAR
    v1,v2: ARRAY_OF INTEGER[10];
    i,ps: INTEGER
BEGIN
    ps:= 0
    i:= 0
    
    IF (V1.length <> v2.length) THEN
        write("v1 and v2 are not equal! ")
        
    END_IF

    WHILE (i<v1.length) DO
        ps := ps + (v1[i]*v2[i])
        i++
    END_WHILE
    
    RETURN ps
END

ALGORITHM orthogo_vect
VAR
    v1,v2 : ARRAY_OF INTEGER[10];
    ps: INTEGER
BEGIN
    write("enter v1 ")
    n1 := read size_v1("v1,n2")
    write("enter v2 ")
    n2 := read size_v1("v2,n2")

    dot_product (v1,v2,ps)
    IF (ps = 0) THEN
        write ("v1 and v2 are two orthogonal vectors")
    ELSE
        write("v1 and v2 are not orthogonal vectors")
    END_IF 
        
    
END